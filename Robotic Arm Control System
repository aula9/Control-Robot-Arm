"""
Robotic Arm Control System with Enhanced Safety Features
--------------------------------------------------------

This project provides an interactive control system for a five-jointed robotic arm
with comprehensive safety mechanisms including:
- Input validation
- Joint limits protection
- Emergency stop
- Collision avoidance
- Error logging
- Speed control
- Basic user authentication

Dependencies:
- Python 3.x
- tkinter
- numpy
- matplotlib
"""

import tkinter as tk
from tkinter import ttk, messagebox
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from math import radians, cos, sin
import logging
from datetime import datetime

# ===== Safety Configuration =====
JOINT_LIMITS = [
    (-150, 150),  # Joint 1 limits
    (-90, 90),    # Joint 2 limits
    (-120, 120),  # Joint 3 limits
    (-90, 90),    # Joint 4 limits
    (-180, 180)   # Joint 5 limits
]

MAX_OPERATION_SPEED = 2.0  # Multiplier for maximum speed
MIN_OPERATION_SPEED = 0.1  # Multiplier for minimum speed

AUTHORIZED_USERS = {
    "admin": "secure123",
    "operator": "robot123"
}

# ===== Initialize Logging =====
logging.basicConfig(
    filename='robot_arm.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# ===== DH Matrix Computation =====
def dh_matrix(theta, d, a, alpha):
    """Compute Denavit-Hartenberg transformation matrix"""
    theta = radians(theta)
    alpha = radians(alpha)
    return np.array([
        [cos(theta), -sin(theta)*cos(alpha), sin(theta)*sin(alpha), a*cos(theta)],
        [sin(theta), cos(theta)*cos(alpha), -cos(theta)*sin(alpha), a*sin(theta)],
        [0, sin(alpha), cos(alpha), d],
        [0, 0, 0, 1]
    ])

# ===== Safety Functions =====
def validate_angle(value, joint_index):
    """Validate joint angle against defined limits"""
    try:
        num = float(value)
        min_limit, max_limit = JOINT_LIMITS[joint_index]
        return min_limit <= num <= max_limit
    except (ValueError, IndexError):
        return False

def check_collision(positions):
    """Simple collision detection with workspace boundaries"""
    for x, y, z in positions:
        if z < 0:  # Prevent going below ground level
            return True
        if (x**2 + y**2) > 100:  # Prevent reaching too far horizontally
            return True
    return False

# ===== Core Robot Functions =====
def draw_robot(joint_angles):
    """Compute and visualize robot arm position"""
    try:
        # Validate all joint angles first
        for i, angle in enumerate(joint_angles):
            if not validate_angle(angle, i):
                raise ValueError(f"Joint {i+1} angle {angle} exceeds safety limits")
        
        # Compute positions using DH parameters
        dh_params = [
            [joint_angles[0], 0, 0, 90],
            [joint_angles[1], 0, 5, 0],
            [joint_angles[2], 0, 4, 0],
            [joint_angles[3], 0, 3, 90],
            [joint_angles[4], 0, 2, 0],
        ]
        
        T = np.eye(4)
        positions = [T[:3, 3]]
        for param in dh_params:
            T_next = dh_matrix(*param)
            T = T @ T_next
            positions.append(T[:3, 3])
        
        # Collision detection
        if check_collision(positions):
            raise ValueError("Collision detected in planned path")
        
        # Visualization
        xs, ys, zs = zip(*positions)
        ax.clear()
        ax.plot(xs, ys, zs, '-o', linewidth=3, markersize=8, color='blue')
        ax.set_xlim([-15, 15])
        ax.set_ylim([-15, 15])
        ax.set_zlim([0, 15])
        ax.set_xlabel("X")
        ax.set_ylabel("Y")
        ax.set_zlabel("Z")
        ax.set_title("Robotic Arm Control - SAFE MODE")
        canvas.draw()
        
    except Exception as e:
        logging.error(f"Operation error: {str(e)}")
        emergency_stop()
        messagebox.showerror("Safety Error", str(e))

def emergency_stop():
    """Immediately stop all motion and reset to safe position"""
    for var in sliders_vars:
        var.set(0)
    draw_robot([0]*5)
    logging.warning("EMERGENCY STOP ACTIVATED")
    messagebox.showwarning("Emergency Stop", "Robot arm has been safely stopped")

# ===== GUI Functions =====
def update_robot(*args):
    """Handle joint angle updates with speed control"""
    try:
        current_speed = speed_var.get()
        angles = []
        for i, var in enumerate(sliders_vars):
            val = var.get()
            if not validate_angle(val, i):
                var.set(0)
                val = 0
            angles.append(val * current_speed)  # Apply speed multiplier
        draw_robot(angles)
    except Exception as e:
        logging.error(f"Update error: {str(e)}")

def login():
    """Basic user authentication"""
    username = username_entry.get()
    password = password_entry.get()
    
    if AUTHORIZED_USERS.get(username) == password:
        enable_controls(True)
        status_label.config(text=f"Logged in as {username}", foreground="green")
        logging.info(f"User {username} logged in successfully")
    else:
        enable_controls(False)
        status_label.config(text="Invalid credentials", foreground="red")
        logging.warning(f"Failed login attempt for username {username}")
        messagebox.showerror("Login Failed", "Invalid username or password")

def enable_controls(enabled):
    """Enable/disable all controls based on authentication"""
    state = tk.NORMAL if enabled else tk.DISABLED
    for slider in joint_sliders:
        slider.config(state=state)
    speed_slider.config(state=state)
    emergency_btn.config(state=state)

# ===== Main GUI Setup =====
root = tk.Tk()
root.title("Secure Robotic Arm Control")

# Create matplotlib figure
fig = plt.figure(figsize=(7, 7))
ax = fig.add_subplot(111, projection='3d')
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().grid(row=0, column=2, rowspan=7, padx=10, pady=10)

# ===== Login Panel =====
login_frame = ttk.LabelFrame(root, text="Operator Authentication", padding=10)
login_frame.grid(row=0, column=0, columnspan=2, padx=5, pady=5, sticky="ew")

ttk.Label(login_frame, text="Username:").grid(row=0, column=0)
username_entry = ttk.Entry(login_frame)
username_entry.grid(row=0, column=1)

ttk.Label(login_frame, text="Password:").grid(row=1, column=0)
password_entry = ttk.Entry(login_frame, show="*")
password_entry.grid(row=1, column=1)

login_btn = ttk.Button(login_frame, text="Login", command=login)
login_btn.grid(row=2, column=0, columnspan=2, pady=5)

status_label = ttk.Label(login_frame, text="Not logged in", foreground="red")
status_label.grid(row=3, column=0, columnspan=2)

# ===== Joint Control Panel =====
control_frame = ttk.LabelFrame(root, text="Joint Control", padding=10)
control_frame.grid(row=1, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")

sliders_vars = []
joint_sliders = []
for i in range(5):
    ttk.Label(control_frame, text=f"Joint {i+1}:").grid(row=i, column=0)
    var = tk.DoubleVar()
    slider = ttk.Scale(control_frame, from_=JOINT_LIMITS[i][0], to=JOINT_LIMITS[i][1],
                      orient='horizontal', variable=var, command=update_robot)
    slider.grid(row=i, column=1, padx=5, pady=2)
    slider.config(state=tk.DISABLED)  # Disabled until login
    sliders_vars.append(var)
    joint_sliders.append(slider)

# ===== Speed Control =====
speed_frame = ttk.Frame(root)
speed_frame.grid(row=6, column=0, columnspan=2, padx=5, pady=5, sticky="ew")

speed_var = tk.DoubleVar(value=1.0)
ttk.Label(speed_frame, text="Speed:").pack(side=tk.LEFT)
speed_slider = ttk.Scale(speed_frame, from_=MIN_OPERATION_SPEED, to=MAX_OPERATION_SPEED,
                        orient='horizontal', variable=speed_var)
speed_slider.pack(side=tk.LEFT, fill=tk.X, expand=True)
speed_slider.config(state=tk.DISABLED)  # Disabled until login

# ===== Emergency Stop Button =====
emergency_btn = ttk.Button(root, text="â›” EMERGENCY STOP", command=emergency_stop,
                          style='Emergency.TButton')
emergency_btn.grid(row=7, column=0, columnspan=2, pady=10, sticky="ew")
emergency_btn.config(state=tk.DISABLED)  # Disabled until login

# ===== UI Styling =====
style = ttk.Style()
style.configure('Emergency.TButton', foreground='white', background='red',
               font=('Helvetica', 12, 'bold'))
style.map('Emergency.TButton',
         background=[('active', 'dark red'), ('disabled', 'light gray')])

# ===== Initialize System =====
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=1)
enable_controls(False)  # Start with controls disabled
draw_robot([0]*5)  # Initialize at zero position

logging.info("Robotic Arm Control System initialized")
root.mainloop()
